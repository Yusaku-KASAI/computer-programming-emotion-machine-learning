import os,sys
import pytest
import pickle
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score

project_root_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root_path)
sys.path.append(os.path.join(project_root_path, "src", "my_library"))

import src.my_library.Validator as Validator

@pytest.fixture(scope="module")
def setup_module():
    # テストデータとモデルを準備する
    X_test = np.array([[1, 2], [3, 4], [5, 6]])
    y_test = np.array([0, 1, 0])
    model = DummyClassifier()  # テスト用のモデルを定義する
    model.fit(X_test, y_test)

    # テスト用のデータセットとモデルを保存する
    test_data_path = "test_data.pkl"
    model_path = "test_model.pkl"
    
    with open(test_data_path, 'wb') as f:
        pickle.dump((X_test, y_test), f)
    
    with open(model_path, 'wb') as f:
        pickle.dump(model, f)
    
    yield test_data_path, model_path
    
    # テスト後にファイルを削除する
    os.remove(test_data_path)
    os.remove(model_path)

def test_load_data(setup_module):
    test_data_path, _ = setup_module
    
    validator = Validator()
    X_loaded, y_loaded = Validator.load_data(test_data_path)
    
    assert np.array_equal(X_loaded, np.array([[1, 2], [3, 4], [5, 6]]))
    assert np.array_equal(y_loaded, np.array([0, 1, 0]))

def test_load_model(setup_module):
    _, model_path = setup_module
    
    Validator = Validator()
    Validator.load_model(model_path)
    
    assert Validator.model is not None  # モデルが正しく読み込まれているかを確認

def test_evaluate_model(setup_module):
    test_data_path, model_path = setup_module
    
    Validator = Validator()
    Validator.load_data(test_data_path)
    Validator.load_model(model_path)
    
    accuracy, precision, recall = validator.evaluate_model()
    
    # テスト用のテストデータとモデルで計算された結果を確認する
    y_test = np.array([0, 1, 0])
    y_pred = Validator.model.predict(Validator.X)
    
    assert accuracy == accuracy_score(y_test, y_pred)
    assert precision == precision_score(y_test, y_pred)
    assert recall == recall_score(y_test, y_pred)